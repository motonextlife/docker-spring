/** 
 **************************************************************************************
 * @file Entity_NullSet_Test.java
 * 
 * @brief エンティティ内部に格納されているデータをNull初期化するメソッドのテストにおいて、
 * 共通で使用するメソッドを提供するインターフェースを格納するファイル。
 * 
 * @note ここと同名のパッケージが、パッケージ[JoinTests]に存在するが、こちらは依存する
 * クラスをモック化してテストする、単体テストである。
 **************************************************************************************
 */ 
package com.springproject.dockerspring.SingleTests.Entity.TestInterface;






/** 
 **************************************************************************************
 * @brief エンティティ内部に格納されているデータをNull初期化するメソッドのテストにおいて、
 * 共通で使用するメソッドを提供するインターフェースを格納するファイル。
 * 
 * @note ここと同名のパッケージが、パッケージ[JoinTests]に存在するが、
 * こちらは依存するクラスをモック化してテストする、単体テストである。
 **************************************************************************************
 */ 
public interface Entity_NullSet_Test {


  /** 
   ****************************************************************************************
   * @brief エンティティ内部のデータに初期化対象文字が含まれていた場合、入力後に取り出した該当データが
   * Nullに初期化されていることを確認する。
   * 
   * @details 初期化対象文字は以下の物である。
   * - 空文字("")
   * - 半角空白(" ")
   * - 全角空白("　")
   * - タブ空白("\t")
   * - 改行空白("\n")
   ****************************************************************************************
   */ 
  void 初期化対象文字のNull初期化確認(String init_str);


  /** 
   ****************************************************************************************
   * @brief エンティティ内部のデータに[Null]が含まれていた場合でも、処理中に[NullPointerException]が
   * 発生して処理が止まらないことを確認する。
   ****************************************************************************************
   */ 
  void Null存在時のNullPointerException未発生確認();
}
