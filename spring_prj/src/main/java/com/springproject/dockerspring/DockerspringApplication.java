/** 
 ***************************************************************************************************************************************************
 * @mainpage 楽団管理システム　リファレンスドキュメント
 * 
 * @brief @b 企業の採用担当者様へ @n
 * お忙しい中、私のポートフォリオとして、このシステムのソースコードとリファレンスドキュメントをご覧いただき、誠にありがとうございます。 @n
 * システムの規模が大きく全てご覧になるのは大変かと存じ上げますので、かいつまんで見ても問題ないように、一つ一つのコードのクオリティや見やすさに気を使っております。 @n
 * また、別途プレゼン資料として、このシステムの概要を把握しやすくするためのPDFシートを用意してありますので、そちらも是非ご覧ください。 @n
 * このページに、簡単に私のプロフィールを記述いたしますので、採用判断の一助となれば幸いです。 @n
 * なお、個人情報までは記述しませんので、別途お送りした履歴書をご覧いただければと思います。@n@n@n
 * 
 * 
 * @par このシステムの大まかな規模
 * - 製作期間は、 @b 「約半年」 となります。
 * - このシステムの、Javaのコードの記述量は @b 「約65000行」 となります。
 * - なおコードのわかりやすさも追及するため、コメント行も同じくらい存在し、コメントとJavaコードの累計は @b 「約130000行」 となります。
 * - このシステムは、世の中で幅広く用いられているJavaフレームワーク @b 「SpringFramework(SpringBoot)」 で開発をしております。
 * - 現状のテストコードのテスト件数は、 @b 「約1000件」 となります。@n@n
 * 
 * 
 * @par このシステムの概要
 * このシステムのコンセプトは、@b アマチュア楽団での団員の情報や、楽譜や打楽器等の設備を管理しやすくするシステム となっております。@n
 * このシステムを開発した背景としては、以下の点があります。 @n
 * 
 * - 自分自身がトランペット奏者として、アマチュアのオーケストラに在籍して活動するなど、10年以上の経験がある。そのことから、自身の経験を元にシステムに
 * 落とし込みやすいと判断した為。
 * - 活動をしていく中で、アマチュア楽団での様々な問題を見てきた(例：楽譜の管理や打楽器の管理、メンバーの在籍の管理など)ため、その業務を緩和することができないかと
 * 日頃から思っていた。だが、アマチュア楽団は学校のクラブ活動同様、有志でやっている物の為、システムを作るといった金銭的な余裕は全くない。
 * - 私はその点に目を付けて、「では自分自身がポートフォリオがてらシステムを作ってみたらどうであろうか？」と思い、今回の開発に着手した。
 * - 現状の世の中では、オーケストラに特化したシステムはほとんど聞かない為、ポートフォリオとしてオリジナリティあふれる作品としても有効であり、就職に有利に働くと判断した。 @n@n
 * 
 * 
 * @par このシステムの主な機能
 * 主な実装機能としては、大まかに以下のような内容です。@n
 * - 団員の個人情報の集約と管理
 * - オーケストラで所有している打楽器などの設備の情報の管理
 * - オーケストラで所有している楽譜の一元管理
 * - 演奏を行う際に参考にする、参考音源の保存＆管理
 * - 以上の情報をCSVファイルとして出力し、エクセルなどで集計に使用できる機能
 * - また、システムに投入したい情報をCSVファイルに記述してシステムに送ることで、まとめてデータを登録できる機能
 * - 保存されている楽譜データや音源のデータを、ZIP形式の圧縮ファイルとして一括で出力できる機能
 * - また、逆にZIP形式の圧縮ファイルに保存したいデータをまとめて格納してシステムに投入することで、データをまとめて登録できる機能
 * - 登録されている情報をPDF形式のファイルに記述して、紙媒体として出力できる機能
 * - 保存されているデータを変更した場合は、変更情報を履歴として保存する機能
 * - 保存されている履歴情報から、元に戻したいデータをロールバックして復元できる機能 @n@n@n
 * 
 * 
 * 
 * @warning このシステムは、未完成となっております。理由としては、
 * - 設計の最初の段階で、自身の経験の無さもあり、開発規模を見誤り大きく作りすぎてしまったため。
 * - 再就職までに「約2年間」という制限を設けていた為、就職活動と逆算すると、途中で開発を中断してポートフォリオとしてお見せするしかなかった為。
 * - 今回が初めての開発の為、思ったように開発が進まず出戻り作業が頻発した為。
 * @n@n 未完成ではありますが、現状存在するテストは、全て合格しています。(別途テスト結果報告書をご覧ください。) @n
 * @n@n なお、開発は今後も継続します。もし御社への入社がかないましたら、プライベートの範囲で少しづつ開発を進めていく所存です。 @n@n@n
 * 
 * 
 * 
 * @par 自身の保有資格
 * 次に、自分自身のITスキルのアピールの為、現在保有しているIT系資格を羅列します。 @n
 * - Java SE11 programmer Silver
 * - Java SE11 programmer Gold
 * - HTMLプロフェッショナル認定試験 Level1
 * - HTMLプロフェッショナル認定試験 Level2
 * - Oracle Master Silver DBA 2019
 * - LinuC Level1
 * - LinuC Level2
 * - PHP5技術者認定　準上級合格
 * - XMLマスター ベーシック
 * - 基本情報技術者
 * - C言語プログラミング能力認定試験 1級合格
 * @n@n なお、今後も自身のスキルアップは怠りません。 @n@n@n
 * 
 * 
 * 
 * @par 最後に
 * 私は、ITエンジニアとしては未経験での就職となります。@n
 * ですが、御社での社内教育に頼り切ってしまうのはとても厚かましいと思い、少しでも入社後に戦力として通用するように学習に尽力してまいりました。@n
 * 未完成ではありますが、このポートフォリオのシステムを評価していただき、御社と私の双方が幸せな結果になることを、心よりお祈り申し上げます。
 ***************************************************************************************************************************************************
 */ 

/** 
 **************************************************************************************
 * @package com.springproject.dockerspring
 * 
 * @brief このシステムのプロダクトコードを格納したパッケージ
 * 
 * @details
 * - このシステムは、[SpringFramework]を採用している。
 * - このシステムが依存しているデータベースの種類は、[MySQL]である。そのため、現状のコードでは
 * このデータベース以外を使用しようとすると不具合が出る恐れがある。
 * - このシステムが依存しているファイルサーバーの種類は、[Samba]である。そのため、現状のコード
 * では、このファイルサーバー以外を使用すると不具合が出る恐れがある。
 **************************************************************************************
 */ 
package com.springproject.dockerspring;




/** 
 **************************************************************************************
 * @file DockerspringApplication.java
 * @brief このシステムを稼働させるためのメインメソッドを実装したクラスを格納したファイル。
 * 
 * @note
 * このファイルに、所属パッケージの説明を記載する。また、ドキュメントのトップページの説明も
 * 記載する。
 **************************************************************************************
 */ 
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableAsync;








/** 
 **************************************************************************************
 * @brief このシステムを稼働させるためのメインメソッドを実装したクラス
 * 
 * @details 
 * - SpringBootにおいては、必ず実装しなくてはならないメインメソッドを実装している。
 * - 内容としては単純で、このシステム全体を起動しているだけである。
 * 
 * @par 使用アノテーション
 * - @SpringBootApplication
 * - @EnableAsync
 **************************************************************************************
 */ 
@SpringBootApplication
@EnableAsync
public class DockerspringApplication {

	public static void main(String[] args) {
		SpringApplication.run(DockerspringApplication.class, args);
	}
}
