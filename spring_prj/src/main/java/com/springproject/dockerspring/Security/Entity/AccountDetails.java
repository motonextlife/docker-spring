/** 
 **************************************************************************************
 * @package com.springproject.dockerspring.Security.Entity
 * 
 * @brief セキュリティ関連の機能で、認証情報などを格納するエンティティを格納したパッケージ
 * 
 * @details
 * - このパッケージでは、データベースから取得してきたデータを格納し、SpringSecurityの認証機能に
 * 渡すエンティティや、認証認可処理時のレスポンスのエンティティを格納する。
 **************************************************************************************
 */ 
package com.springproject.dockerspring.Security.Entity;





/** 
 ******************************************************************************************
 * @file AccountDetails.java
 * @brief アカウントの認証の際に、SpringSecurityの認証コンテキストとして登録するエンティティ
 * のクラスを格納するファイル。
 * 
 * @note
 * このファイルに、所属パッケージの説明を記載する。
 **************************************************************************************
 */ 
import java.util.Collection;


import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;









/** 
 ******************************************************************************************
 * @brief アカウントの認証の際に、SpringSecurityの認証コンテキストとして登録するエンティティ
 * のクラス
 * 
 * @details 
 * - このクラスは、SpringSecurityが実装するUserDetailsを継承して利用する。
 * - このクラスに格納する内容としては、ユーザー名やパスワード、アカウントのロックの有無である。
 * - SpringSecurityの仕様上、このエンティティを認証時に返すBeanを作るだけで、自動的に認証処理が
 * 行われる。詳しくは、SpringSecurityの説明を調べること。
 ******************************************************************************************
 */
public class AccountDetails implements UserDetails{

	//! ユーザー名
	private final String username;

	//! パスワード（ハッシュ変換済み）
	private final String password;

	//! 権限情報
	private final Collection<GrantedAuthority> authority;

	//! ロックの有無
	private final Boolean lock;








	/** 
	 ******************************************************************************************
	 * @brief データベースから取得した情報をこのエンティティに格納する為のコンストラクタ。
	 * 
	 * @param[in] username ユーザー名
	 * @param[in] password ハッシュ化済みのパスワード
	 * @param[in] authority データベースから取得した権限情報を格納したリスト
	 * @param[in] lock 対象アカウントのロックの有無
	 ******************************************************************************************
	 */
	public AccountDetails(String username, String password, Collection<GrantedAuthority> authority, Boolean lock){
		this.username = username;
		this.password = password;
		this.authority = authority;
		this.lock = lock;
	}





	/** 
	 ******************************************************************************************
	 * @brief 格納済みの権限情報のリストを取得する。
	 * 
	 * @return 権限情報のリスト
	 ******************************************************************************************
	 */
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		return this.authority;
	}





	/** 
	 ******************************************************************************************
	 * @brief 格納済みのユーザー名を取得する。
	 * 
	 * @return ユーザー名
	 ******************************************************************************************
	 */
	@Override
	public String getPassword() {
		return this.password;
	}





	/** 
	 ******************************************************************************************
	 * @brief 格納済みのパスワードを取得する。
	 * 
	 * @return ハッシュ文字列のパスワード
	 ******************************************************************************************
	 */
	@Override
	public String getUsername() {
		return this.username;
	}





	/** 
	 ******************************************************************************************
	 * @brief アカウントの有効期限が切れているかの真偽値を返す。
	 * 
	 * @details この値に関しては、要件上用いないので常に有効とする。
	 * 
	 * @return 「True」なら有効、「False」なら無効。
	 ******************************************************************************************
	 */
	@Override
	public boolean isAccountNonExpired() {
		return true;
	}





	/** 
	 ******************************************************************************************
	 * @brief アカウントのロックの有無の真偽値を返す。
	 * 
	 * @return 「True」ならロックなし、「False」ならロック中。
	 ******************************************************************************************
	 */
	@Override
	public boolean isAccountNonLocked() {
		return this.lock;
	}






	/** 
	 ******************************************************************************************
	 * @brief アカウントの資格情報（パスワード）の有効期限が切れているかどうかの真偽値を返す。
	 * 
	 * @details この値に関しては、要件上用いないので常に有効とする。
	 * 
	 * @return 「True」なら有効、「False」なら無効。
	 ******************************************************************************************
	 */
	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}






	/** 
	 ******************************************************************************************
	 * @brief アカウントが有効かどうかの真偽値を返す。
	 * 
	 * @details この値に関しては、要件上用いないので常に有効とする。
	 * 
	 * @return 「True」なら有効、「False」なら無効。
	 ******************************************************************************************
	 */
	@Override
	public boolean isEnabled() {
		return true;
	}
}